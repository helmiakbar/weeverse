link href="http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.css" rel="stylesheet"
script src="http://cdn.leafletjs.com/leaflet-0.6.4/leaflet.js"
script src="http://code.jquery.com/jquery-1.8.3.min.js"
script src="http://code.jquery.com/ui/1.9.2/jquery-ui.js"

#map

= form_for @idea do |f|
  - if @idea.errors.any?
    #error_explanation
      h2 = "#{pluralize(@idea.errors.count, "error")} prohibited this idea from being saved:"
      ul
        - @idea.errors.full_messages.each do |message|
          li = message

  #container-bar.row
    .large-4.columns.top-bar-content
      p
        | Drag this
        img.drag.show alt="POI: red" src="/assets/idea-marker.png" type="red"
        | to the map, or set location manually
    .large-8.columns.top-bar-content
      table style="background:none; border:none; margin-bottom:0; margin-top:-6px; margin-left: -15px;"
        tr
          td 
            = f.label :country
          td
            = f.text_field :country
          td 
            = f.label :city
          td
            = f.text_field :city
          td 
            = f.label :postal_code
          td
            = f.text_field :postal_code
          td 
            = f.label :street
          td
            = f.text_field :street
          td
            div id ="add-address" "Set Location"
    #container-content.row
      #container-content-left.large-2.columns
        .row
          == render "left_menu"
      #container-content-right.large-10.columns
        .row
          #container-upload.large-4.columns
            #box-upload
              / a#btn-upload.button.success href="#"
              = f.label :image, "Upload Image"
              = f.file_field :image
          #container-information.large-8.columns
            = f.text_field :title, placeholder: "Title"
            = f.text_area :description, placeholder: "Description"
            = f.label :tag_list, "Tags ( separated by commas )"
            = f.text_field :tag_list
            = f.hidden_field :creator, value: current_user.name
            = f.hidden_field :category, value: Idea
            = f.hidden_field :lat
            = f.hidden_field :long
            = f.hidden_field :region_name
            = f.hidden_field :project_id
        .row
          #container-add.large-4.large-offset-2
            .actions = f.submit 'Save', id: "btn-add", class: "button"
    / .row
    /   = f.label :image
    /   = f.file_field :image

javascript:
  var gs = {
    wfs: 'http://lab.georepublic.info/geoserver/grp/wfs',
    ows: 'http://lab.georepublic.info/geoserver/grp/ows'
  };
  
  // Configure map
  var map, user;
  var markers = [];
  
  var poiIcon = L.Icon.extend({
    options: {
      iconSize: [31,17],
      iconAnchor: [-20,0],
      shadowSize: [22,13],
      shadowAnchor: [-31,-19],
      popupAnchor: [32,-2]
    }
  });

  var redIcon   = new poiIcon({iconUrl:'/assets/idea-marker.png'});;
  
  // Mapquest layer
  var mapquest = new L.TileLayer('http://otile{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png', {
    maxZoom: 18, 
    attribution: "Â©<a href='http://openstreetmap.org/' target='_blank'>OpenStreetMap</a> contributors, Tiles Courtesy of <a href='http://open.mapquest.com' target='_blank'>MapQuest</a>", 
    subdomains: ['1','2','3','4']
  });
  
  // Init application
  $(document).ready(function() {
    // Assign points to users
    $.get('http://api.hostip.info/get_json.php',function(json){
      user = json;
      // Load user points
      loadPoints();
    });

    map = new L.Map('map', {
      center: new L.LatLng(#{@location.latitude}, #{@location.longitude}), 
      zoom: 16,
      layers: [mapquest],
      zoomControl: true
    });

    $("#add-address").click(function(){
       var url = "http://open.mapquestapi.com/geocoding/v1/address?key=Fmjtd%7Cluubnua22l%2Caw%3Do5-907l90&outFormat=json&inFormat=json&json={location:{street:" + $("#idea_city").val() +"},options:{thumbMaps:false}}"

      $.get( url, function( data ) {
        var address = "";
        if(typeof(data) == "string") {
          address = JSON.parse(data);
        }
        else {
          address = data;
        }
        lat = data.results[0].locations[0].latLng.lat
        lng = data.results[0].locations[0].latLng.lng
        $("#idea_lat").val(data.results[0].locations[0].latLng.lat)
        $("#idea_long").val(data.results[0].locations[0].latLng.lng)

        var redIcon = L.icon({
          iconUrl: '/assets/idea-marker.png'
        });

        map.panTo(new L.LatLng(parseFloat(lat), parseFloat(lng)));
        var marker = L.marker([parseFloat(lat), parseFloat(lng)], {icon: redIcon}).addTo(map);

      });
    })

    
    // Drag & Drop
    $(".drag").draggable({
      helper: 'clone',
      containment: 'map',
      start: function(evt, ui) {

      },
      stop: function(evt, ui) {
      $(".show").hide();

        var options = {
          pid: guid(),
          type: ui.helper.attr('type'),
          icon: eval(ui.helper.attr('type') + 'Icon'),
          draggable: true
        };

        insertPoint(
          map.containerPointToLatLng([ui.offset.left, ui.offset.top - 75]),
          options
        );
      }
    });                        
  });

  // GET points
  function loadPoints() {

  var maxFeatures = 50;
  var params = '?service=WFS&version=1.1.0&request=GetFeature&typeName=grp:points'
  + '&outputFormat=json&sortBy=created+D&maxFeatures=' + maxFeatures
  + '&filter=<PropertyIsEqualTo><PropertyName>ip</PropertyName><Literal>' 
  + user.ip + '</Literal></PropertyIsEqualTo>';

  $.get(gs.ows + params, function(json){

  // Remove all markers
  for(i=0;i<markers.length;i++) {
    map.removeLayer(markers[i]);
  }
  markers = [];

  // Add markers
  for(i=0;i<json.features.length;i++) {
  
    var ftr = json.features[i];

    var options = {
      pid: ftr.properties.pid,
      type: ftr.properties['class'],
      icon: eval(ftr.properties['class'] + 'Icon'),
      draggable: true
    };

    var point = L.marker([ftr.geometry.coordinates[0],ftr.geometry.coordinates[1]],options).addTo(map);
    point.bindPopup(
      '<a onClick="deletePoint(\'' + point.options.pid 
      + '\');" href="#">Remove Me!</a>',
      {
        closeButton: false
      }
    );

    point.on('dragend', function(evt){
      updatePoint(point);
    });

    markers.push(point);
                  }
                  });
                  }

  // INSERT point

  function insertPoint(position,options) {
    console.log(position);
    var url = "//open.mapquestapi.com/geocoding/v1/reverse?key=Fmjtd%7Cluubnua22l%2Caw%3Do5-907l90&json={location: {latLng: {lat:"+ position.lat +",lng:"+ position.lng +"}}}"

    $.get( url, function( data ) {
      console.log(data);
      var address = "";
      if(typeof(data) == "string") {
        address = JSON.parse(data);
      }
      else {
        address = data;
      }
      $("#idea_country").val(data.results[0].locations[0].adminArea4)
      $("#idea_city").val(data.results[0].locations[0].adminArea5)
      $("#idea_postal_code").val(data.results[0].locations[0].postalCode)
      $("#idea_lat").val(data.results[0].locations[0].latLng.lat)
      $("#idea_long").val(data.results[0].locations[0].latLng.lng)
    
    });
    var point = L.marker(position,options).addTo(map);

    point.on('dragend', function(evt){
      updatePoint(point);
    });

    markers.push(point);

  }

  // UPDATE point
  function updatePoint(point) {
    console.log("lat: "+ point.getLatLng().lat);
    console.log("long: "+ point.getLatLng().lng);
    var url = "//open.mapquestapi.com/geocoding/v1/reverse?key=Fmjtd%7Cluubnua22l%2Caw%3Do5-907l90&json={location: {latLng: {lat:"+ point.getLatLng().lat +",lng:"+ point.getLatLng().lng +"}}}"

    $.get( url, function( data ) {
      console.log(data);
      var address = "";
      if(typeof(data) == "string") {
        address = JSON.parse(data);
      }
      else {
        address = data;
      }
      $("#idea_country").val(data.results[0].locations[0].adminArea4)
      $("#idea_city").val(data.results[0].locations[0].adminArea5)
      $("#idea_postal_code").val(data.results[0].locations[0].postalCode)
      $("#idea_lat").val(data.results[0].locations[0].latLng.lat)
      $("#idea_long").val(data.results[0].locations[0].latLng.lng)
    
    });
    var point = L.marker(position,options).addTo(map);

    point.on('dragend', function(evt){
      updatePoint(point);
    });

    markers.push(point);

  }

  // DELETE point
  function deletePoint(pid) {
  
  for(i=0;i<markers.length;i++) {
  if(markers[i].options.pid === pid) {
  map.removeLayer(markers[i]);
  markers.splice(i, 1);
  }
  }

  var postData = 
  '<wfs:Transaction\n'
  + '  service="WFS"\n'
  + '  version="1.1.0"\n'
  + '  xmlns:grp="http://lab.georepublic.info"\n'
  + '  xmlns:wfs="http://www.opengis.net/wfs"\n'
  + '  xmlns:ogc="http://www.opengis.net/ogc"\n'
  + '  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"\n'
  + '  xsi:schemaLocation="http://www.opengis.net/wfs\n'
  + '                      http://schemas.opengis.net/wfs/1.1.0/WFS-transaction.xsd">\n'
  + '  <wfs:Delete typeName="grp:points">\n'
  + '    <ogc:Filter>\n'
  + '      <PropertyIsEqualTo>\n'
  + '        <PropertyName>pid</PropertyName>\n'
  + '        <Literal>' + pid + '</Literal>\n'
  + '      </PropertyIsEqualTo>\n'
  + '    </ogc:Filter>\n'
  + '  </wfs:Delete>\n'
  + '</wfs:Transaction>';

  $.ajax({
  type: "POST",
  url: gs.wfs,
  dataType: "xml",
  contentType: "text/xml",
  data: postData,
                  //TODO: Error handling
                  success: function(xml) {        
                          //TODO: User feedback
                          }
                          });
                          }

  // Create a GUID
  function S4() {
  return (((1+Math.random())*0x10000)|0).toString(16).substring(1);
  }
  function guid() {
  return (S4()+S4()+"-"+S4()+"-"+S4()+"-"+S4()+"-"+S4()+S4()+S4());
  }